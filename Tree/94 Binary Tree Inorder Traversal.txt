//Go solution
unc inorderTraversal(root *TreeNode) []int {
var res [] int
    var inorder func(root *TreeNode)
    
    inorder = func(root *TreeNode){
        if root == nil{return}
        if(root.Left != nil){
            inorder(root.Left)
        }
        res = append(res, root.Val)
        inorder(root.Right)
    }
    
    inorder(root)
    return res
    
}

//python solution(using Stack)
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        stack = []
        cur = root
        
        while cur or stack:
            while cur:
                stack.append(cur)
                cur = cur.left
            cur = stack.pop()
            res.append(cur.val)
            cur = cur.right
        return res

//python solution(using Recursive)
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        def inorder(root):
            if not root:
                return
            inorder(root.left)
            res.append(root.val)
            inorder(root.right)
        
        inorder(root)
        return res

